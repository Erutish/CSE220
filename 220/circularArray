{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO5t8E6VSbrXYDOjZaLDuki"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"4bbTqlyqUpbK"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":1,"metadata":{"id":"rLdETIVIh-Jo","executionInfo":{"status":"ok","timestamp":1671804796536,"user_tz":-360,"elapsed":2,"user":{"displayName":"ROWSHON ARA CHOWDHURY","userId":"05437628018935418832"}}},"outputs":[],"source":["class CircularArray:\n","  def __init__(self, lin, start, size):\n","    # Initializing Variables\n","    self.start = start\n","    self.size = size\n","    self.cir = [None]*len(lin)\n","    k=self.start\n","    for i in range(len(lin)):\n","      self.cir[k]=lin[i]\n","      k=(k+1)%len(self.cir)\n","    # if lin = [10, 20, 30, 40, None]\n","    # then, CircularArray(lin, 2, 4) will generate\n","    # cir = [40, null, 10, 20, 30]\n","\n","\n","  def printFullLinear(self): #Easy\n","    for j in range(len(self.cir)):\n","      if(j<len(self.cir)-1):\n","        print(self.cir[j], end=\", \")\n","      else:\n","        print(self.cir[j])\n","\n","\n","    # Print from start index and total size elements\n","  def printForward(self): #Easy\n","    # To Do\n","    k=self.start\n","    for i in range(self.size):\n","      if(i<self.size-1):\n","        print(self.cir[k], end=\", \")\n","      else:\n","        print(self.cir[k])\n","      k=(k+1)%len(self.cir)\n","    \n","  \n","\n","  def printBackward(self): #Easy\n","    k=(self.start+self.size-1)%len(self.cir)\n","    for i in range(self.size):\n","\n","\n","\n","      if(i<self.size-1):\n","        print(self.cir[k], end=\", \")\n","      else:\n","        print(self.cir[k])\n","      k=k-1\n","      if(k==-1):\n","        k=len(self.cir)-1\n","    # pass # Remove this line\n","\n","  def linearize(self): #Medium\n","    lin=[None]*self.size\n","    k=self.start\n","    for i in range(self.size):\n","      lin[i]=self.cir[k]\n","      k=(k+1)%len(self.cir)\n","    self.cir=lin\n","\n","  def resizeStartUnchanged(self, newcapacity): #Medium\n","    newCir=[None]*newcapacity\n","    k=self.start\n","    j=self.start\n","    for i in range(self.size):\n","      newCir[j]=self.cir[k]\n","      k=(k+1)%len(self.cir)\n","      j=(j+1)%len(newCir)\n","    self.cir=newCir\n","  # This method will check whether the array is palindrome or not\n","  def palindromeCheck(self): #Hard\n","    k=self.start\n","    j = (self.start + self.size - 1) % len(self.cir)\n","    f=0\n","    for i in range(self.size//2):\n","      if(self.cir[j] != self.cir[k]):\n","        f=1\n","      k = (k + 1) % len(self.cir)\n","      j = j - 1\n","      if j == -1:\n","        j = len(self.cir) - 1\n","    if(f==1):\n","      print(\"This array is not palindrome\")\n","    else:\n","      print(\"This array is a palindrome\")\n","\n","  # This method will sort the values by keeping the start unchanged\n","  def sort(self):\n","    #Bubble sort\n","    \n","    for i in range(self.size-1):\n","      k=self.start\n","      for j in range(self.size-i-1):\n","        if(self.cir[k] > self.cir[(k+1)%len(self.cir)]):\n","          temp=self.cir[k]\n","          self.cir[k]=self.cir[(k+1)%len(self.cir)]\n","          self.cir[(k+1)%len(self.cir)]=temp\n","        k=(k+1)%len(self.cir)\n","    # pass # Remove this line\n","\n","   # This method will check the given array across the base array and if they are equivalent interms of values return true, or else return false\n","  def equivalent(self, other):\n","    if(self.size == other.size):\n","      k=self.start\n","      l=other.start\n","      f=0\n","      for i in range(self.size):\n","        if(self.cir[k]!=other.cir[l]):\n","          f=1\n","        k=(k+1)%len(self.cir)\n","        l=(l+1)%len(other.cir)\n","      if(f==0):\n","        return True\n","    return False\n","   \n","\n","\n","  # the method take another circular array and returns a linear array containing the common elements between the two circular arrays.\n","  def intersection(self, c2):\n","    # To Do\n","    #li =[]\n","    #for i in range(len(self.cir)):\n","        #for j in range(len(c2.cir)):\n","            #if self.cir[i]==c2.cir[j]:\n","                #if self.cir[i]!=None:\n","                    #li.append(self.cir[i])\n","    #output=li\n","    #return output\n","    pass # Remove this line\n","  def intersection(self, c2):\n","    if(len(self.cir)>len(c2.cir)):\n","      smallArr=c2.cir\n","      smallSz=c2.size\n","      smallSt=c2.start\n","      largeArr=self.cir\n","      largeSz=self.size\n","      largeSt=self.start\n","    else:\n","      smallArr=self.cir\n","      smallSz=self.size\n","      smallSt=self.start\n","      largeArr=c2.cir\n","      largeSz=c2.size\n","      largeSt=c2.start\n","    common=[None]*smallSz\n","    cSz=0\n","    k=smallSt\n","    for i in range(smallSz):\n","      l=largeSt\n","      for j in range(largeSz):\n","        if(smallArr[k]==largeArr[l]):\n","          common[cSz]=smallArr[k]\n","          cSz+=1\n","        l=(l+1)%len(largeArr)\n","      k=(k+1)%len(smallArr)\n","    print(common)\n","    final=[None]*cSz\n","    for i in range(cSz):\n","      final[i]=common[i]\n","    return final\n","    \n","    \n","\n","\n","\n","\n"]},{"cell_type":"code","source":["# Tester class. Run this cell after completing methods in the upper cell and\n","# check the output\n","\n","lin_arr1 = [10, 20, 30, 40, None]\n","\n","print(\"==========Test 1==========\")\n","c1 = CircularArray(lin_arr1, 2, 4)\n","c1.printFullLinear() # This should print: 40, None, 10, 20, 30\n","c1.printForward() # This should print: 10, 20, 30, 40\n","c1.printBackward() # This should print: 40, 30, 20, 10\n","\n","print(\"==========Test 2==========\")\n","c1.linearize()\n","c1.printFullLinear() # This should print: 10, 20, 30, 40\n","\n","print(\"==========Test 3==========\")\n","lin_arr2 = [10, 20, 30, 40, 50]\n","c2 = CircularArray(lin_arr2, 2, 5)\n","c2.printFullLinear() # This should print: 40, 50, 10, 20, 30\n","c2.resizeStartUnchanged(8) # parameter --> new Capacity\n","c2.printFullLinear() # This should print: None, None, 10, 20, 30, 40, 50, None\n","\n","print(\"==========Test 4==========\")\n","lin_arr3 = [10, 20, 30, 20, 10, None, None]\n","c3 = CircularArray(lin_arr3, 3, 5)\n","c3.printForward() # This should print: 10, 20, 30, 20, 10\n","c3.palindromeCheck() # This should print: This array is a palindrome\n","\n","print(\"==========Test 5==========\")\n","lin_arr4 = [10, 20, 30, 20, None, None, None]\n","c4 = CircularArray(lin_arr4, 3, 4)\n","c4.printForward() # This should print: 10, 20, 30, 20\n","c4.palindromeCheck() # This should print: This array is NOT a palindrome\n","\n","print(\"==========Test 6==========\")\n","lin_arr5 = [10, 20, -30, 20, 50, 30, None]\n","c5 = CircularArray(lin_arr5, 5, 6)\n","c5.printForward() # This should print: 10, 20, -30, 20, 50, 30\n","c5.sort()\n","c5.printForward() # This should print: -30, 10, 20, 20, 30, 50\n","\n","print(\"==========Test 7==========\")\n","lin_arr6 = [10, 20, -30, 20, 50, 30, None]\n","c6 = CircularArray(lin_arr6, 2, 6)\n","c7 = CircularArray(lin_arr6, 5, 6)\n","c6.printForward() # This should print: 10, 20, -30, 20, 50, 30\n","c7.printForward() # This should print: 10, 20, -30, 20, 50, 30\n","print(c6.equivalent(c7)) # This should print: True\n","\n","print(\"==========Test 8==========\")\n","lin_arr7 = [10, 20, -30, 20, 50, 30, None, None, None]\n","c8 = CircularArray(lin_arr7, 8, 6)\n","c6.printForward() # This should print: 10, 20, -30, 20, 50, 30\n","c8.printForward() # This should print: 10, 20, -30, 20, 50, 30\n","print(c6.equivalent(c8)) # This should print: True\n","\n","print(\"==========Test 9==========\")\n","lin_arr8 = [10, 20, 30, 40, 50, 60, None, None, None]\n","c9 = CircularArray(lin_arr8, 8, 6)\n","c6.printForward() # This should print: 10, 20, -30, 20, 50, 30\n","c9.printForward() # This should print: 10, 20, 30, 40, 50, 60\n","print(c6.equivalent(c9)) # This should print: False\n","\n","print(\"==========Test 10==========\")\n","lin_arr9 = [10, 20, 30, 40, 50, None, None, None]\n","c10 = CircularArray(lin_arr9, 5, 5)\n","c10.printFullLinear() # This should print: 40, 50, None, None, None, 10, 20, 30\n","lin_arr10 = [5, 40, 15, 25, 10, 20, 5, None, None, None, None, None]\n","c11 = CircularArray(lin_arr10, 8, 7)\n","c11.printFullLinear() # This should print: 10, 20, 5, None, None, None, None, None, 5, 40, 15, 25\n","output = c10.intersection(c11)\n","print(output) # This should print: [10, 20, 40]"],"metadata":{"id":"tDATQ11ddKkx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671804811773,"user_tz":-360,"elapsed":1334,"user":{"displayName":"ROWSHON ARA CHOWDHURY","userId":"05437628018935418832"}},"outputId":"60afa0a6-8088-4005-b832-2a6b1f5af838"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["==========Test 1==========\n","40, None, 10, 20, 30\n","10, 20, 30, 40\n","40, 30, 20, 10\n","==========Test 2==========\n","10, 20, 30, 40\n","==========Test 3==========\n","40, 50, 10, 20, 30\n","None, None, 10, 20, 30, 40, 50, None\n","==========Test 4==========\n","10, 20, 30, 20, 10\n","This array is a palindrome\n","==========Test 5==========\n","10, 20, 30, 20\n","This array is not palindrome\n","==========Test 6==========\n","10, 20, -30, 20, 50, 30\n","-30, 10, 20, 20, 30, 50\n","==========Test 7==========\n","10, 20, -30, 20, 50, 30\n","10, 20, -30, 20, 50, 30\n","True\n","==========Test 8==========\n","10, 20, -30, 20, 50, 30\n","10, 20, -30, 20, 50, 30\n","True\n","==========Test 9==========\n","10, 20, -30, 20, 50, 30\n","10, 20, 30, 40, 50, 60\n","False\n","==========Test 10==========\n","40, 50, None, None, None, 10, 20, 30\n","10, 20, 5, None, None, None, None, None, 5, 40, 15, 25\n","[10, 20, 40, None, None]\n","[10, 20, 40]\n"]}]},{"cell_type":"code","source":["def reverse(c1,st1,sz1,c2,st2,sz2):\n","    lin=[None]*(sz1+sz2)\n","    k1=(st1+sz1-1)%len(c1)\n","    for i in range(sz1):\n","        lin[i]=c1[k1]\n","        k1-=1\n","        if k1==-1:\n","            k1=len(c1)-1\n","    k2=(st2+sz2-1)%len(c2)\n","    for i in range(sz2):\n","        lin[sz1+i]=c2[k2]\n","        k2-=1\n","        if k2==-1:\n","            k2=len(c2)-1\n","    print(lin)\n","reverse([6,7,None,None,3,1],4,4,[1,3,None,6],3,3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uqhEJMq2yVbV","executionInfo":{"status":"ok","timestamp":1667467871939,"user_tz":-360,"elapsed":4,"user":{"displayName":"ROWSHON ARA CHOWDHURY","userId":"05437628018935418832"}},"outputId":"0bdc99ce-144b-4909-87c9-6f9998f5c07f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[7, 6, 1, 3, 3, 1, 6]\n"]}]},{"cell_type":"code","source":["def reverse(c1,st1,sz1,c2,st2,sz2):\n","    lin=[None]*(sz1+sz2)\n","    k1=(st1+sz1-1)%len(c1)\n","    for i in range(len(lin)):\n","        if i%2==0:\n","          lin[i]=c1[k1]\n","          k1-=1\n","          if k1==-1:\n","            k1=len(c1)-1\n","    k2=(st2+sz2-1)%len(c2)\n","    for i in range(len(lin)):\n","        if i%2!=0:\n","            lin[i]=c2[k2]\n","            k2-=1\n","            if k2==-1:\n","              k2=len(c2)-1\n","    print(lin)\n","reverse([6,7,None,None,3,1],4,4,[1,3,None,6],3,3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gyox0GV41WRU","executionInfo":{"status":"ok","timestamp":1667469778362,"user_tz":-360,"elapsed":391,"user":{"displayName":"ROWSHON ARA CHOWDHURY","userId":"05437628018935418832"}},"outputId":"14a1befc-dc88-4ced-8555-8c79e46f563d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[7, 3, 6, 1, 1, 6, 3]\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"apLpKVfrUiTc"}}]}